# Copyright 2022 Alex Badics <admin@stickman.hu>
#
# This file is part of Hun-Law.
#
# Hun-Law is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hun-Law is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hun-Law.  If not, see <https://www.gnu.org/licenses/>.

# ============ STARTING TOKENS ============
@export
Root =
    content:BlockAmendment $ |
    content:BlockAmendmentWithSubtitle $ |
    content:BlockAmendmentStructural $ |
    content:TextAmendment $ |
    content:EnforcementDate $ |
    content:Repeal $ |
    content:ListOfSimpleExpressions $ ;

# ============ STRUCTURE PARSING ============

@export
ListOfSimpleExpressions = {contents:AnySimpleExpression}+;

AnySimpleExpression =
    @:Quote |
    @:CompoundReference |
    @:AttachmentReference |
    @:AnyToken ;

CompoundReference =
    [act_reference:ActReference] references:Reference {ListSeparator references:Reference} |
    act_reference:ActReference ;

@position
Reference =
        article:ArticleReference >ReferenceWithParagraph |
        article:ArticleReference [>ReferenceWithPoint] |
        >ReferenceWithParagraph |
        >ReferenceWithPoint |
        >ReferenceWithSubpoint
        ;

ReferenceWithParagraph = paragraph:ParagraphReference [>ReferenceWithPoint];
ReferenceWithPoint = (alphabetic_point:AlphabeticPointReference | numeric_point:NumericPointReference) [>ReferenceWithSubpoint];
ReferenceWithSubpoint = alphabetic_subpoint:AlphabeticSubpointReference | numeric_subpoint:NumericSubpointReference;

ActReference =
    @:ActIdWithFromNowOn |
    @:Abbreviation
    ;

# The check here is a hack, since it mutates state and doesn't check anything,
# but this is an experimental solution right now. Proper, semantic support should
# be implemented in peginator if this works out
@check(crate::store_abbreviation)
ActIdWithFromNowOn =
    act_id:ActId
    [
        "(" "a" "továbbiakban" [":"] ( ActId | abbreviation:PotentialAbbreviation ) ")"
    ];

@string
@no_skip_ws
PotentialAbbreviation = {!")" char}+;

@position
ActId = year:Number "." "évi" number:Roman "." ActSuffix;
@no_skip_ws
ActSuffix = "törvén" {HunLower}+ | "tv.";


ArticleReference = @:ArticleReferencePart { ListSeparator @:ArticleReferencePart } ArticleSuffix;
@position
ArticleReferencePart =
    [book:Number ":" ]
    (
        start:ArticleId ["." ArticleSuffix] Dash [Number ":" ] end:ArticleId "." |
        id_without_book:ArticleId "."
    );
@string
@no_skip_ws
ArticleId = (Number ["/" 'A'..'Z']);
@no_skip_ws
ArticleSuffix = "§-" {HunLower}+ | "§" ;

@position
SingleArticleReference = part:ArticleReferencePart ArticleSuffix;


ParagraphReference = @:ParagraphReferencePart { ListSeparator @:ParagraphReferencePart } ParagraphSuffix;
@position
ParagraphReferencePart = "(" start:ParagraphId ")" Dash "(" end:ParagraphId ")" | "(" id:ParagraphId ")";
@string
@no_skip_ws
ParagraphId = Number ['a'..'z'];
@no_skip_ws
ParagraphSuffix = "bekezdés" {HunLower};


AlphabeticPointReference =  @:AlphabeticPointReferencePart { ListSeparator @:AlphabeticPointReferencePart } AlphabeticPointSuffix;
@position
AlphabeticPointReferencePart = start:AlphabeticPointId [")"] Dash end:AlphabeticPointId ")" | id:AlphabeticPointId ")";
@string
@no_skip_ws
AlphabeticPointId = "ny" | "sz" | 'a'..'z';
@no_skip_ws
AlphabeticPointSuffix = "pont" {HunLower};


NumericPointReference= @:NumericPointReferencePart { ListSeparator @:NumericPointReferencePart } NumericPointSuffix;
@position
NumericPointReferencePart = start:NumericPointId Dash end:NumericPointId "." | id:NumericPointId "." ;
@string
@no_skip_ws
NumericPointId = Number [["/"] 'a'..'z'];
@no_skip_ws
NumericPointSuffix = "pont" {HunLower};


AlphabeticSubpointReference = @:AlphabeticSubpointReferencePart { ListSeparator @:AlphabeticSubpointReferencePart } AlphabeticSubpointSuffix;
@position
AlphabeticSubpointReferencePart = start:AlphabeticSubpointId ")" Dash end:AlphabeticSubpointId ")" | id:AlphabeticSubpointId ")" ;
@string
@no_skip_ws
AlphabeticSubpointId = 'a'..'z' ['a'..'z'];
@no_skip_ws
AlphabeticSubpointSuffix = "alpont" {HunLower};


NumericSubpointReference = @:NumericSubpointReferencePart { ListSeparator @:NumericSubpointReferencePart } NumericSubpointSuffix;
@position
NumericSubpointReferencePart = start:NumericSubpointId  Dash end:NumericSubpointId "." | id:NumericSubpointId ".";
@string
@no_skip_ws
NumericSubpointId = Number ;
@no_skip_ws
NumericSubpointSuffix = "alpont" {HunLower};


@position
Abbreviation = content:AbbreviationContent;

@extern(crate::parse_abbreviation)
AbbreviationContent;


# No "@no_skip_ws" here or below, because we actually do want to trim the string
Quote = "„" @:QuoteInner '”' ;

@string
QuoteInner = {!('„' | '”') char} { "„" QuoteInner  '”' {!('„' | '”') char} };

ListSeparator = ((["," | ";"] ("és" | "valamint" | "illetve" | "vagy")) | "," | ";") [Az];

# ============= STRUCTURAL REFERENCES =============

AfterArticle = [Az] @:SingleArticleReference ("követően" | "követő" );
BeforeArticle = [Az] @:SingleArticleReference ("megelőzően" | "megelőző" | "előtti");
ArticleRelativePosition = @:BeforeArticle | @:AfterArticle ;
SubtitleTitle = ( title:Quote | title:RawTitle ) ["című"] SubtitleSuffix;

@string
RawTitle = CapitalizedWord {!(["című"] SubtitleSuffixPossessive) AnyToken};

SubtitlesReference = @:SubtitleReferencePart { ListSeparator @:SubtitleReferencePart } SubtitleSuffix;
SubtitleReferencePart = start:SubtitleId ["."] Dash end:SubtitleId "." | id:SubtitleId ".";

@string
SubtitleId = Number [["/"] 'A'..'Z'];
@no_skip_ws
SubtitleSuffix = "alcím" {HunLower};

# !HunLower is there to prevent "alcímekkel" from matching
@no_skip_ws
SubtitleSuffixPossessive = ("alcíme" | "alcímében" | "alcím címe" | "alcím címében") !HunLower ;

@string
ChapterId = Roman [["/"] 'A'..'Z'];
ChapterReference = id:ChapterId  "." ChapterSuffix;
@no_skip_ws
ChapterSuffix = ("fejezet" | "Fejezet" | "FEJEZET") {HunAny};

PartReference = id:HungarianOrdinalCapital PartSuffix;
@no_skip_ws
PartSuffix = ("rész" | "Rész" | "RÉSZ") {HunAny};

@string
TitleId = Roman [["/"] 'A'..'Z'];
TitleReference = id:TitleId "." TitleSuffix;
@no_skip_ws
TitleSuffix = ("cím" | "Cím" | "CÍM") {HunAny};

@no_skip_ws
TitleOnlyToken = "címe" ['i'] | "címé" {HunLower};

@memoize
AnyStructuralReference =
    [book_id:HungarianOrdinalCapital ("könyv" | "Könyv" | "KÖNYV")]
    (
        reference:ChapterReference |
        reference:PartReference |
        reference:TitleReference |
        reference:SubtitleReferencePart SubtitleSuffix |
        reference:SubtitleTitle
    )
    [title_only:TitleOnlyToken];

# ============ Other references ============

AttachmentReference =
    attachment:AttachmentReferencePart {ListSeparator attachment:AttachmentReferencePart} AttachmentSuffix
    [point:NumericPointReference]
    ;
AttachmentReferencePart = (start:Number Dash end:Number | id:Number) ".";
@no_skip_ws
AttachmentSuffix = "melléklet" {HunLower};

# ============ BLOCK AMENDMENT PARSING ============

AmendmentCombinatorJunk = {"és" | "valamint" | "ezzel" | "egyidejűleg"};
@no_skip_ws
TheFollowing = ["a " | "az "] ("következő" | "alábbi" {HunLower});

InsertionToken = AmendmentCombinatorJunk TheFollowing;

@position
InsertionReference =
        InsertionToken article:ArticleReference paragraph:ParagraphReference
    |
        InsertionToken article:ArticleReference [ListSeparator article:ArticleReference]
    |
        [[Az] article:ArticleReference | "a §"]
        InsertionToken
        paragraph:ParagraphReference
    |
        [[Az] article:ArticleReference [paragraph:ParagraphReference] | "a §" | "a bekezdés"]
        InsertionToken
        (alphabetic_point:AlphabeticPointReference | numeric_point:NumericPointReference)
    |
        [Az] article:ArticleReference [paragraph:ParagraphReference]
        (alphabetic_point:AlphabeticPointReference | numeric_point:NumericPointReference)
        InsertionToken
        (alphabetic_subpoint:AlphabeticSubpointReference | numeric_subpoint:NumericSubpointReference)
    ;

TitleInsertionWithBook =
    book_id:HungarianOrdinalCapital ("Könyve" | "KÖNYVE")
    InsertionToken
    id:TitleId "." TitleSuffix;

# Note: conflicts with "TitleOnly" stuff due to the last term
@no_skip_ws
SubtitleToken = "alcím" ['-'] {HunLower} [ " " "cím" {HunLower}];

ReferenceWithSubtitle =
    SubtitleToken "és" article:SingleArticleReference |
    article:SingleArticleReference "és" Az ["azt" | "azokat" | "§-t"] "megelőző" SubtitleToken |
    id:SubtitleId  "." SubtitleToken |
    title:Quote SubtitleToken |
    SubtitleToken ;

AmendmentSuffix =
    "helyébe" TheFollowing ("rendelkezés lép" | "rendelkezések lépnek") |
    TheFollowing "szöveggel lép hatályba" |
    TheFollowing "szerint módosul";

AmendmentSuffixWithSubtitle =
    "helyébe" TheFollowing ["rendelkezés és"] "alcím" ["cím"] ["és rendelkezés"] ("lép" | "lépnek") ;

AmendmentSuffixWithStructural =
    "helyébe" TheFollowing ["alcím" ["cím"] | "cím" | "fejezet" | "Fejezet" | "rész"] "lép" ;

InsertionSuffix =
    "egészül ki" |
    "kiegészülve lép hatályba" ;

# This rule means: skip everything until an ActReference,
# except if the found reference continues with some typical phrases
# in that case, just continue skipping
@memoize
ActTitle =
    { !(ActReference !("hatálybalépés" | "módosítás" | "összefüggő")) AnyToken };

BlockAmendment = AzAny ActTitle act_reference:ActReference [parent:AnyStructuralReference]
    (
        # non-subtitle cases
        amended_reference:Reference AmendmentSuffix ":" |
        inserted_reference:InsertionReference InsertionSuffix ":" |
        (
            amended_reference:Reference AmendmentSuffix [","]  AmendmentCombinatorJunk
            # this is usually the exact same as in the beginning
            [[Az] ActReference] [AnyStructuralReference]
            inserted_reference:InsertionReference InsertionSuffix ":"
        )
    );

BlockAmendmentWithSubtitle =
    AzAny ActTitle act_reference:ActReference
    [parent:AnyStructuralReference]
    [article_relative:ArticleRelativePosition]
    (
        reference:ReferenceWithSubtitle AmendmentSuffix ":" |
        reference:ReferenceWithSubtitle AmendmentSuffixWithSubtitle ":" |
        InsertionToken reference:ReferenceWithSubtitle is_insertion:InsertionSuffix ":"
    );

BlockAmendmentStructural = AzAny ActTitle act_reference:ActReference
    [ArticleRelativePosition]
    (
        reference:AnyStructuralReference AmendmentSuffix ":" |
        reference:AnyStructuralReference AmendmentSuffixWithStructural ":" |
        InsertionToken reference:AnyStructuralReference is_insertion:InsertionSuffix ":" |
        reference:TitleInsertionWithBook is_insertion:InsertionSuffix ":"
    );


# ============ ENFORCEMENT DATE PARSING ============

AfterPublication =
    ["a" | "e törvény"]
    ("kihirdetését"| "kihirdetést") "követő"
    [days:HungarianOrdinal | days:NumberWithDot]
    "napon"
    ;

DayInMonth =
    ["a" | "e törvény"]
    ("kihirdetését"| "kihirdetést") "követő"
    [month:HungarianOrdinal]
    "hónap"
    (day:HungarianOrdinal | day:NumberWithDot)
    "napján"
    ;

InlineRepeal =
    [","] "és"
    [("ez a" | "e") "törvény"]
    @:Date
    ["a"] "hatályát veszti"
    ;

EnforcementDate =
    (
        (("Ez a" | "E") "törvény") |
        AzUpper
    )
    [
        [Dash] "a"
        exception_references:Reference
        ExceptionJunk
        [Dash]
    ]
    [ references:EnforcementDateReference { ListSeparator references:EnforcementDateReference } ]
    [Az]
    (
        date:Date |
        date:AfterPublication |
        date:DayInMonth
    )
    "lép hatályba"
    [inline_repeal:InlineRepeal]
    "."
    ;

EnforcementDateReference = @:Reference | @:AnyStructuralReference | @:SubtitlesReference | @:AttachmentReference;

@no_skip_ws
ExceptionJunk = ("szerinti"|"foglalt"|"foglalt"|){HunLower} " kivétel"{HunLower};

# ============ TEXT AMENDMENT PARSING ==============
@no_skip_ws
ArticleTitleToken = ["szakasz"] "cím" {HunLower}+;
ArticleTitleReference = article:SingleArticleReference ArticleTitleToken ;

IntroToken = "nyitó";
WrapUpToken = "záró";

ReferenceWithIntroWrapup =
    reference:Reference
    [
        (token:IntroToken | token:WrapUpToken)
        TextAmendmentToken
    ];

TextAmendmentSubtitleJunk = SubtitleTitle [TitleOnlyToken] | [SubtitleReferencePart] SubtitleToken;

TextAmendmentStructuralReference =
    parent:AnyStructuralReference child:ArticleRelativePosition TextAmendmentSubtitleJunk |
    parent:AnyStructuralReference child:AnyStructuralReference |
    child:ArticleRelativePosition TextAmendmentSubtitleJunk |
    child:AnyStructuralReference
    ;

TextAmendmentReference =
    @:ArticleTitleReference |
    @:TextAmendmentStructuralReference |
    @:SubtitlesReference |
    @:ReferenceWithIntroWrapup ;

TextAmendment =
    AzAny ActTitle act_reference:ActReference
    references:TextAmendmentReference [ListSeparator]
    { (references:TextAmendmentReference | AttachmentReference) [ListSeparator] }
    parts:TextAmendmentPart { ListSeparator parts:TextAmendmentPart} [","]
    "lép" ["hatályba"] "."
    ;

TextAmendmentPart =
    [Az] from:Quote
    TextAmendmentToken ("helyébe" | "helyett")
    [Az] to:Quote
    (
        &ListSeparator | TextAmendmentToken
    )
    ;

@no_skip_ws
TextAmendmentToken = "szöveg" {HunLower};

# ============ REPEAL PARSING ==============

Repeal =
    ("Nem lép hatályba" | "Hatályát veszti" | "Hatályát veszíti")
    Az ActTitle act_reference:ActReference
    # TODO: use TextAmendmentReference, but keep StructuralRepeal in mind somehow
    { (references:TextAmendmentReference) [ListSeparator] }
    { [Az] texts:Quote [TextAmendmentToken] [ListSeparator]}
    "."
    ;

# ============ SIMPLE TOKENS ============

AnyToken = Word | Number | char;

@char
HunAny = HunLower | HunUpper;
@char
HunLower = 'a'..'z' | 'é' | 'á' | 'ő' | 'ú' | 'ö' | 'ü' | 'ó' | 'í' | 'ű';
@char
HunUpper = 'A'..'Z' | 'É' | 'Á' | 'Ő' | 'Ú' | 'Ö' | 'Ü' | 'Ó' | 'Í' | 'Ű';

@no_skip_ws
Az = 'a' ['z'] ' ';
@no_skip_ws
AzUpper = 'A' ['z'] ' ';
@no_skip_ws
AzAny = Az | AzUpper;

NumberWithDot = @:Number "." ;
@string
@no_skip_ws
Number = {'0'..'9'}+ ;
@string
@no_skip_ws
Roman = { RomanNumeralChar }+ ; # TODO: actual grammar for this.
@char
RomanNumeralChar = 'I' | 'V' | 'X' | 'L' | 'C' | 'D' | 'M' ;

@no_skip_ws
Word = {HunAny | '-'}+ ;

@no_skip_ws
CapitalizedWord = HunUpper {HunAny | '-'} ;

Date = year:Number "." month:Month day:Number ("-án" | "-jén" | "-én" | ". napján");

@string
@no_skip_ws
Month = "január" | "február" | "március" | "április" | "május" | "június" |
    "július" | "augusztus" | "szeptember" | "október" | "november" | "december";

@string
@no_skip_ws
HungarianOrdinal = "első" | "második" | "harmadik" | "negyedik" | "ötödik" |
    "hatodik" | "hetedik"| "nyolcadik" | "kilencedik" | "tizedik" |
    "tizenegyedik" | "tizenkettedik" | "tizenharmadik" | "tizennegyedik" | "tizenötödik" |
    "tizenhatodik" | "tizenhetedik" | "tizennyolcadik" | "tizenkilencedik" |
    "huszadik" | "harmincadik" | "negyvenedik" | "ötvenedik" |
    "hatvanadik" | "hetvenedik" | "nyolcvanadik" | "kilencvenedik";

@string
@no_skip_ws
HungarianOrdinalCapital = "Első" | "Második" | "Harmadik" | "Negyedik" | "Ötödik" |
    "Hatodik" | "Hetedik"| "Nyolcadik" | "Kilencedik" | "Tizedik" |
    "Tizenegyedik" | "Tizenkettedik" | "Tizenharmadik" | "Tizennegyedik" | "Tizenötödik" |
    "Tizenhatodik" | "Tizenhetedik" | "Tizennyolcadik" | "Tizenkilencedik" |
    "ELSŐ" | "MÁSODIK" | "HARMADIK" | "NEGYEDIK" | "ÖTÖDIK" |
    "HATODIK" | "HETEDIK"| "NYOLCADIK" | "KILENCEDIK" | "TIZEDIK" |
    "TIZENEGYEDIK" | "TIZENKETTEDIK" | "TIZENHARMADIK" | "TIZENNEGYEDIK" | "TIZENÖTÖDIK" |
    "TIZENHATODIK" | "TIZENHETEDIK" | "TIZENNYOLCADIK" | "TIZENKILENCEDIK" ;

@char
Dash = '−' | '–' | '-' ;
