# Copyright 2022 Alex Badics <admin@stickman.hu>
#
# This file is part of Hun-Law.
#
# Hun-Law is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Hun-Law is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Hun-Law.  If not, see <https://www.gnu.org/licenses/>.

# ============ STARTING TOKENS ============
@export
Root =
    content:BlockAmendment $ |
    content:BlockAmendmentWithSubtitle $ |
    content:BlockAmendmentStructural $ |
    content:TextAmendment $ |
    content:ArticleTitleAmendment $ |
    content:EnforcementDate $ |
    content:Repeal $ |
    content:StructuralRepeal $ |
    content:ListOfSimpleExpressions $ ;

# ============ STRUCTURE PARSING ============

@export
ListOfSimpleExpressions = {contents:AnySimpleExpression}+;

AnySimpleExpression =
    @:Quote |
    @:CompoundReference |
    @:AnyToken ;

CompoundReference =
    [act_reference:ActReference] references:Reference {ListSeparator references:Reference} |
    act_reference:ActReference ;

@position
Reference =
        article:ArticleReference >ReferenceWithParagraph |
        article:ArticleReference [>ReferenceWithPoint] |
        >ReferenceWithParagraph |
        >ReferenceWithPoint |
        >ReferenceWithSubpoint
        ;

ReferenceWithParagraph = paragraph:ParagraphReference [>ReferenceWithPoint];
ReferenceWithPoint = (alphabetic_point:AlphabeticPointReference | numeric_point:NumericPointReference) [>ReferenceWithSubpoint];
ReferenceWithSubpoint = alphabetic_subpoint:AlphabeticSubpointReference | numeric_subpoint:NumericSubpointReference;

ActReference =
    @:Abbreviation |
    @:ActIdWithFromNowOn ;
ActIdWithFromNowOn =
    act_id:ActId
    [
        "(" "a" "továbbiakban" [":"]
        (
            abbreviation:Abbreviation ["törvény"] |
            ActId |
            {Word}+
        )
        ")"
    ];

@position
ActId = year:Number "." "évi" number:Roman "." ActSuffix;
@no_skip_ws
ActSuffix = "törvén" {HunLower}+ | "tv.";


ArticleReference = @:ArticleReferencePart { ListSeparator @:ArticleReferencePart } ArticleSuffix;
@position
ArticleReferencePart = start:ArticleId ["." ArticleSuffix] Dash end:ArticleId "." | id:ArticleId ".";
@string
@no_skip_ws
ArticleId = ([Number ":" ] Number ["/" 'A'..'Z']);
@no_skip_ws
ArticleSuffix = "§-" {HunLower}+ | "§" ;

@position
SingleArticleReference = part:ArticleReferencePart ArticleSuffix;


ParagraphReference = @:ParagraphReferencePart { ListSeparator @:ParagraphReferencePart } ParagraphSuffix;
@position
ParagraphReferencePart = "(" start:ParagraphId ")" Dash "(" end:ParagraphId ")" | "(" id:ParagraphId ")";
@string
@no_skip_ws
ParagraphId = Number ['a'..'z'];
@no_skip_ws
ParagraphSuffix = "bekezdés" {HunLower};


AlphabeticPointReference =  @:AlphabeticPointReferencePart { ListSeparator @:AlphabeticPointReferencePart } AlphabeticPointSuffix;
@position
AlphabeticPointReferencePart = start:AlphabeticPointId [")"] Dash end:AlphabeticPointId ")" | id:AlphabeticPointId ")";
@string
@no_skip_ws
AlphabeticPointId = "ny" | "sz" | 'a'..'z';
@no_skip_ws
AlphabeticPointSuffix = "pont" {HunLower};


NumericPointReference= @:NumericPointReferencePart { ListSeparator @:NumericPointReferencePart } NumericPointSuffix;
@position
NumericPointReferencePart = start:NumericPointId Dash end:NumericPointId "." | id:NumericPointId "." ;
@string
@no_skip_ws
NumericPointId = Number [["/"] 'a'..'z'];
@no_skip_ws
NumericPointSuffix = "pont" {HunLower};


AlphabeticSubpointReference = @:AlphabeticSubpointReferencePart { ListSeparator @:AlphabeticSubpointReferencePart } AlphabeticSubpointSuffix;
@position
AlphabeticSubpointReferencePart = start:AlphabeticSubpointId ")" Dash end:AlphabeticSubpointId ")" | id:AlphabeticSubpointId ")" ;
@string
@no_skip_ws
AlphabeticSubpointId = 'a'..'z' ['a'..'z'];
@no_skip_ws
AlphabeticSubpointSuffix = "alpont" {HunLower};


NumericSubpointReference = @:NumericSubpointReferencePart { ListSeparator @:NumericSubpointReferencePart } NumericSubpointSuffix;
@position
NumericSubpointReferencePart = start:NumericSubpointId  Dash end:NumericSubpointId "." | id:NumericSubpointId ".";
@string
@no_skip_ws
NumericSubpointId = Number ;
@no_skip_ws
NumericSubpointSuffix = "alpont" {HunLower};


@position
Abbreviation = content:AbbreviationContent;
@string
@no_skip_ws
AbbreviationContent = ["új "] HunUpper {HunLower}+ (['.'] [' '] ("Sztv." | "sztv." | "tv." | "Tv." | "vhr.") | '.');


# No "@no_skip_ws" here or below, because we actually do want to trim the string
Quote = "„" @:QuoteInner '”' ;

@string
QuoteInner = {!('„' | '”') char} { "„" QuoteInner  '”' {!('„' | '”') char} };

ListSeparator = ((["," | ";"] ("és" | "valamint" | "illetve" | "vagy")) | "," | ";") [Az];

# ============= STRUCTURAL REFERENCES =============

AfterArticle = [Az] @:SingleArticleReference ("követően" | "követő" );
BeforeArticle = [Az] @:SingleArticleReference ("megelőzően" | "megelőző" );
SubtitleTitle = ( title:Quote | title:RawTitle ) ["című"] SubtitleSuffix;

@string
RawTitle = {!(["című"] SubtitleSuffixPossessive) !"§" AnyToken};

@string
SubtitleId = Number [["/"] 'A'..'Z'];
SubtitleReference = id:SubtitleId  "." SubtitleSuffix;
@no_skip_ws
SubtitleSuffix = "alcím" {HunLower};

# !HunLower is there to prevent "alcímekkel" from matching
@no_skip_ws
SubtitleSuffixPossessive = ("alcíme"| "alcím címe" ) !HunLower ;

@string
ChapterId = Roman [["/"] 'A'..'Z'];
ChapterReference = id:ChapterId  "." ChapterSuffix;
@no_skip_ws
ChapterSuffix = "Fejezet" {HunLower};

PartReference = id:HungarianOrdinalCapital PartSuffix;
@no_skip_ws
PartSuffix = "Rész" {HunLower};

@string
TitleId = Roman [["/"] 'A'..'Z'];
TitleReference = id:TitleId "." TitleSuffix;
@no_skip_ws
TitleSuffix = "Cím" {HunLower};

@no_skip_ws
TitleOnlyToken = "címe" ['i'];

AnyStructuralReference =
    [book_id:HungarianOrdinalCapital ("Könyv" | "KÖNYV")]
    (
        reference:SubtitleReference |
        reference:SubtitleTitle |
        reference:ChapterReference |
        reference:PartReference |
        reference:TitleReference
    )
    [title_only:TitleOnlyToken];

# ============ Other references ============

AttachmentReference = (start:Number Dash end:Number | id:Number) "." AttachmentSuffix;
@no_skip_ws
AttachmentSuffix = "melléklet" {HunLower};

# ============ BLOCK AMENDMENT PARSING ============

InsertionToken = "a következő";

@position
InsertionReference =
        InsertionToken article:ArticleReference [paragraph:ParagraphReference]
    |
        [[Az] article:ArticleReference | "a §"]
        InsertionToken
        paragraph:ParagraphReference
    |
        [[Az] article:ArticleReference [paragraph:ParagraphReference] | "a §" | "a bekezdés"]
        InsertionToken
        (alphabetic_point:AlphabeticPointReference | numeric_point:NumericPointReference)
    |
        [Az] article:ArticleReference [paragraph:ParagraphReference]
        (alphabetic_point:AlphabeticPointReference | numeric_point:NumericPointReference)
        InsertionToken
        (alphabetic_subpoint:AlphabeticSubpointReference | numeric_subpoint:NumericSubpointReference)
    ;

TitleInsertionWithBook =
    book_id:HungarianOrdinalCapital ("Könyve" | "KÖNYVE")
    InsertionToken
    id:TitleId "." TitleSuffix;

# Note: conflicts with "TitleOnly" stuff due to the last term
@no_skip_ws
SubtitleToken = "alcímmel" | "alcímekkel" | "alcím-megjelölése" | "alcím-megjelölés" |  "alcíme" | "alcím" [" cím" {HunLower}];

ReferenceWithSubtitle =
    SubtitleToken "és" article:SingleArticleReference |
    article:SingleArticleReference "és" Az ["azt" | "azokat" | "§-t"] "megelőző" SubtitleToken |
    id:SubtitleId  "." SubtitleToken |
    Quote SubtitleToken |
    SubtitleToken ;

AmendmentSuffix =
    "helyébe a következő" ("rendelkezés lép" | "rendelkezések lépnek") |
    "a következő szöveggel lép hatályba" ;

AmendmentSuffixWithSubtitle =
    "helyébe a következő" ["rendelkezés és"] "alcím" ["és rendelkezés"] ("lép" | "lépnek") ;

AmendmentSuffixWithStructural =
    "helyébe a következő" ["cím" | "fejezet" | "Fejezet" | "rész"] "lép" ;

InsertionSuffix =
    "egészül ki" |
    "kiegészülve lép hatályba" ;

StructuralPositionReference =
    [ChapterReference] @:AfterArticle |
    [ChapterReference] @:BeforeArticle |
    @:AnyStructuralReference ;

# This rule means: skip everything until an ActReference,
# except if the found reference continues with "hatálybalépésével összefüggő"
# in that case, just continue skipping
@memoize
ActTitle =
    { !(ActReference !"hatálybalépésével összefüggő") AnyToken };

BlockAmendment = AzAny ActTitle act_reference:ActReference [position:StructuralPositionReference]
    (
        # non-subtitle cases
        amended_reference:Reference AmendmentSuffix ":" |
        inserted_reference:InsertionReference InsertionSuffix ":" |
        (
            amended_reference:Reference AmendmentSuffix [","] ["és" | "valamint" | "egyidejűleg"]
            # this is usually the exact same as in the beginning
            [[Az] ActReference] [StructuralPositionReference]
            inserted_reference:InsertionReference InsertionSuffix ":"
        )
    );

BlockAmendmentWithSubtitle = AzAny ActTitle act_reference:ActReference [position:StructuralPositionReference]
    (
        reference:ReferenceWithSubtitle AmendmentSuffix ":" |
        reference:ReferenceWithSubtitle AmendmentSuffixWithSubtitle ":" |
        InsertionToken reference:ReferenceWithSubtitle is_insertion:InsertionSuffix ":"
    );

BlockAmendmentStructural = AzAny ActTitle act_reference:ActReference
    (
        reference:AnyStructuralReference AmendmentSuffix ":" |
        reference:AnyStructuralReference AmendmentSuffixWithStructural ":" |
        InsertionToken reference:AnyStructuralReference is_insertion:InsertionSuffix ":" |
        reference:TitleInsertionWithBook is_insertion:InsertionSuffix ":"
    );


# ============ ENFORCEMENT DATE PARSING ============

AfterPublication =
    ["a" | "e törvény"]
    ("kihirdetését"| "kihirdetést") "követő"
    [days:HungarianOrdinal | days:NumberWithDot]
    "napon"
    ;

DayInMonth =
    ["a" | "e törvény"]
    ("kihirdetését"| "kihirdetést") "követő"
    [month:HungarianOrdinal]
    "hónap"
    (day:HungarianOrdinal | day:NumberWithDot)
    "napján"
    ;

InlineRepeal =
    [","] "és"
    [("ez a" | "e") "törvény"]
    @:Date
    ["a"] "hatályát veszti"
    ;

EnforcementDate =
    (
        (("Ez a" | "E") "törvény") |
        AzUpper
    )
    [
        Dash "a"
        exception_references:Reference
        ("szerinti"|"foglaltak"|"foglalt"|"meghatározott")
        ("kivétellel"|"kivételével"|"kivételekkel")
        Dash
    ]
    [ references:Reference { ListSeparator (references:Reference | AttachmentReference) } ]
    (
        date:Date |
        date:AfterPublication |
        date:DayInMonth
    )
    "lép hatályba"
    [inline_repeal:InlineRepeal]
    "."
    ;

# ============ TEXT AMENDMENT PARSING ==============
@no_skip_ws
IntroWrapupToken = ("nyitó" | "záró" ) Whitespace "szövegrész" {HunLower};

TextAmendment =
    AzAny ActTitle act_reference:ActReference
    { references:Reference [IntroWrapupToken] [ListSeparator] }+
    parts:TextAmendmentPart { ListSeparator parts:TextAmendmentPart} [","]
    "lép" ["hatályba"] "."
    ;

TextAmendmentPart =
    [Az] original_text:Quote
    ("szövegrészek"| "szövegrész") ("helyébe" | "helyett")
    [Az] replacement_text:Quote
    (
        &ListSeparator | "szöveggel" | "szövegrész" | "szöveg"
    )
    ;
# ============ ARTICLE TITLE AMENDMENT PARSING ==============
@no_skip_ws
ArticleTitleToken = "cím" {HunLower}+;
ArticleTitleAmendment =
    AzAny ActTitle act_reference:ActReference
    article:SingleArticleReference
    ArticleTitleToken
    [Az] original_text:Quote
    ("szövegrészek"| "szövegrész") ("helyébe" | "helyett")
    [Az] replacement_text:Quote
    ("szöveggel" | "szövegrész" | "szöveg")
    "lép" ["hatályba"] "."
    ;

# ============ REPEAL PARSING ==============

Repeal =
    ("Nem lép hatályba" | "Hatályát veszti")
    Az ActTitle act_reference:ActReference
    [ references:Reference { ListSeparator references:Reference } [","] ]
    { [Az] texts:Quote ["szövegrész"] [ListSeparator]}
    "."
    ;

StructuralRepeal =
    ("Nem lép hatályba" | "Hatályát veszti")
    Az ActTitle act_reference:ActReference
    reference:StructuralPositionReference [SubtitleToken]
    "."
    ;


# ============ SIMPLE TOKENS ============

AnyToken = Word | Number | char;

@char
HunLower = 'a'..'z' | 'é' | 'á' | 'ő' | 'ú' | 'ö' | 'ü' | 'ó' | 'í' | 'ű';
@char
HunUpper = 'A'..'Z' | 'É' | 'Á' | 'Ő' | 'Ú' | 'Ö' | 'Ü' | 'Ó' | 'Í' | 'Ű';

@no_skip_ws
Az = 'a' ['z'] ' ';
@no_skip_ws
AzUpper = 'A' ['z'] ' ';
@no_skip_ws
AzAny = Az | AzUpper;

NumberWithDot = @:Number "." ;
@string
@no_skip_ws
Number = {'0'..'9'}+ ;
@string
@no_skip_ws
Roman = {'I' | 'V' | 'X' | 'L' | 'C' | 'D' | 'M'}+ ; # TODO: actual grammar for this.

@no_skip_ws
Word = {HunLower | HunUpper | '-'}+ ;

Date = year:Number "." month:Month day:Number ("-án" | "-jén" | "-én" | ". napján");

@string
Month = "január" | "február" | "március" | "április" | "május" | "június" |
    "július" | "augusztus" | "szeptember" | "október" | "november" | "december";

@string
HungarianOrdinal = "első" | "második" | "harmadik" | "negyedik" | "ötödik" |
    "hatodik" | "hetedik"| "nyolcadik" | "kilencedik" | "tizedik" |
    "tizenegyedik" | "tizenkettedik" | "tizenharmadik" | "tizennegyedik" | "tizenötödik" |
    "tizenhatodik" | "tizenhetedik" | "tizennyolcadik" | "tizenkilencedik" |
    "huszadik" | "harmincadik" | "negyvenedik" | "ötvenedik" |
    "hatvanadik" | "hetvenedik" | "nyolcvanadik" | "kilencvenedik";

@string
HungarianOrdinalCapital = "Első" | "Második" | "Harmadik" | "Negyedik" | "Ötödik" |
    "Hatodik" | "Hetedik"| "Nyolcadik" | "Kilencedik" | "Tizedik" |
    "Tizenegyedik" | "Tizenkettedik" | "Tizenharmadik" | "Tizennegyedik" | "Tizenötödik" |
    "Tizenhatodik" | "Tizenhetedik" | "Tizennyolcadik" | "Tizenkilencedik" |
    "ELSŐ" | "MÁSODIK" | "HARMADIK" | "NEGYEDIK" | "ÖTÖDIK" |
    "HATODIK" | "HETEDIK"| "NYOLCADIK" | "KILENCEDIK" | "TIZEDIK" |
    "TIZENEGYEDIK" | "TIZENKETTEDIK" | "TIZENHARMADIK" | "TIZENNEGYEDIK" | "TIZENÖTÖDIK" |
    "TIZENHATODIK" | "TIZENHETEDIK" | "TIZENNYOLCADIK" | "TIZENKILENCEDIK" ;

Dash = "−" | "–" | "-" ;
